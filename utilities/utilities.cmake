function(get_all_targets var)
    set(targets)
    get_all_targets_recursive(targets ${CMAKE_CURRENT_SOURCE_DIR})
    set(${var} ${targets} PARENT_SCOPE)
endfunction()
 
macro(get_all_targets_recursive targets dir)
    get_property(subdirectories DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)
    foreach(subdir ${subdirectories})
        get_all_targets_recursive(${targets} ${subdir})
    endforeach()

    get_property(current_targets DIRECTORY ${dir} PROPERTY BUILDSYSTEM_TARGETS)
    list(APPEND ${targets} ${current_targets})
endmacro()

function(generate_include_file OUTPUT_FILE GLOBBING_EXPR RELATIVE_PATH RECURSIVE)
    if(${RECURSIVE})
        file(GLOB_RECURSE files LIST_DIRECTORIES FALSE "${GLOBBING_EXPR}")
    else()
        file(GLOB files LIST_DIRECTORIES FALSE "${GLOBBING_EXPR}")
    endif()

    file(WRITE "${OUTPUT_FILE}" "")

    file(APPEND "${OUTPUT_FILE}" 
    "// AUTOGENERATED WITH CMAKE\n")

    foreach(file ${files})
        cmake_path(COMPARE "${file}" NOT_EQUAL "${OUTPUT_FILE}" eq_path)
        if(${eq_path})
            file(RELATIVE_PATH relative_file "${RELATIVE_PATH}" "${file}")
            file(APPEND "${OUTPUT_FILE}" "#include <${relative_file}>\n")
        endif()
    endforeach()
endfunction()

macro(setup_project)
    if (PROJECT_IS_TOP_LEVEL)
        set_property(GLOBAL PROPERTY USE_FOLDERS ON)
    	
        set(CMAKE_SYSTEM_VERSION 10.0.22000.0)
    
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin-lib")
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin-etc")
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin")
    
        set(CMAKE_CXX_STANDARD 23)
        set(CMAKE_CXX_STANDARD_REQUIRED)
    endif()
    
    set_property(GLOBAL PROPERTY USE_FOLDERS ON)
    enable_testing()

    include(CheckIPOSupported)
    check_ipo_supported(RESULT IPO_SUPPORTED OUTPUT IPO_NOT_SUPPORTED_ERROR LANGUAGES CXX)

    if(NOT ${IPO_SUPPORTED})
        message(STATUS "IPO / LTO not supported: <${IPO_NOT_SUPPORTED_ERROR}>")
    else()
        message(STATUS "IPO / LTO supported.")
    endif()
endmacro()

macro(setup_targets)
    get_all_targets(TARGETS)
    
    # Set project settings
    foreach(TARGET ${TARGETS})
        get_target_property(TARGET_SOURCE_DIR ${TARGET} SOURCE_DIR)
        get_target_property(TARGET_TYPE ${TARGET} TYPE)

        set(l ${ARGN})
    
        # Set target filters and include dirs
        if(${TARGET} IN_LIST l)
            if(${TARGET} MATCHES "_test$")
                set_target_properties(${TARGET} PROPERTIES FOLDER "tests")
            else()
                set_target_properties(${TARGET} PROPERTIES FOLDER "${CMAKE_PROJECT_NAME}")
            endif()
    
            if (${TARGET_TYPE} STREQUAL "INTERFACE_LIBRARY")
                target_include_directories(${TARGET} INTERFACE "${TARGET_SOURCE_DIR}")
            elseif(${TARGET_TYPE} STREQUAL "UTILITY")
                # Do nothing
            else()
                target_include_directories(${TARGET} PUBLIC "${TARGET_SOURCE_DIR}")
    
                if(${IPO_SUPPORTED})
                    set_target_properties(${TARGET} PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)
                endif()
            endif()
    
            if(${TARGET_TYPE} STREQUAL "EXECUTABLE")
                set_target_properties(${TARGET} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY $<TARGET_FILE_DIR:${TARGET}>)
            endif()
        else()
            set_target_properties(${TARGET} PROPERTIES FOLDER "vendor")
        endif()
    
        # Set compile options
        if(MSVC AND NOT ${TARGET_TYPE} STREQUAL "INTERFACE_LIBRARY" AND NOT ${TARGET_TYPE} STREQUAL "UTILITY")
            target_compile_options(
                ${TARGET}
                PRIVATE /W3 # warning lvl-3
                PRIVATE /MP # multi-processor compilation
                # PRIVATE /FR
            )
        endif()
    
    endforeach()
endmacro()

function(generate_include_file OUTPUT_FILE GLOBBING_EXPR RELATIVE_PATH RECURSIVE)
    file(REMOVE "${OUTPUT_FILE}")

    if(${RECURSIVE})
        file(GLOB_RECURSE files LIST_DIRECTORIES FALSE "${GLOBBING_EXPR}")
    else()
        file(GLOB files LIST_DIRECTORIES FALSE "${GLOBBING_EXPR}")
    endif()

    file(WRITE "${OUTPUT_FILE}" "")

    file(APPEND "${OUTPUT_FILE}" 
    "// AUTOGENERATED WITH CMAKE\n")

    foreach(file ${files})
        cmake_path(COMPARE "${file}" NOT_EQUAL "${OUTPUT_FILE}" eq_path)
        if(${eq_path})
            file(RELATIVE_PATH relative_file "${RELATIVE_PATH}" "${file}")
            file(APPEND "${OUTPUT_FILE}" "#include <${relative_file}>\n")
        endif()
    endforeach()

endfunction()