include(utilities/fetch_content.cmake)

function(fetch_make_available_eastl library_name)

    FetchContent_Declare_URL_MakeAvailable(${library_name}_EASTL_BASE 
        https://github.com/electronicarts/EABase/archive/refs/tags/2.09.05.zip
        )

    FetchContent_Declare_URL_Populate(${library_name} https://github.com/electronicarts/EASTL/archive/refs/heads/master.zip)

    set(EASTL_ROOT_DIR "${${library_name}_SOURCE_DIR}")

    add_library(${library_name} 
        ${EASTL_ROOT_DIR}/doc/EASTL.natvis
        ${EASTL_ROOT_DIR}/source/allocator_eastl.cpp
        ${EASTL_ROOT_DIR}/source/assert.cpp
        ${EASTL_ROOT_DIR}/source/atomic.cpp
        ${EASTL_ROOT_DIR}/source/fixed_pool.cpp
        ${EASTL_ROOT_DIR}/source/hashtable.cpp
        ${EASTL_ROOT_DIR}/source/intrusive_list.cpp
        ${EASTL_ROOT_DIR}/source/numeric_limits.cpp
        ${EASTL_ROOT_DIR}/source/red_black_tree.cpp
        ${EASTL_ROOT_DIR}/source/string.cpp
        ${EASTL_ROOT_DIR}/source/thread_support.cpp

        )

    target_include_directories(${library_name} PUBLIC 
        ${EASTL_ROOT_DIR}/include
        ${EASTL_ROOT_DIR}/test/packages/EAAssert/include
        ${EASTL_ROOT_DIR}/test/packages/EABase/include/Common
        ${EASTL_ROOT_DIR}/test/packages/EAMain/include
        ${EASTL_ROOT_DIR}/test/packages/EAStdC/include
        ${EASTL_ROOT_DIR}/test/packages/EATest/include
        ${EASTL_ROOT_DIR}/test/packages/EAThread/include
    )

    # set(EASTL_LIBRARY debug ${EASTL_ROOT_DIR}/build/Debug/EASTL.lib optimized ${EASTL_ROOT_DIR}/build/Release/EASTL.lib)
    # target_link_libraries(${library_name} PUBLIC ${EASTL_LIBRARY})
    
    target_include_directories(${library_name} 
        PUBLIC "${${library_name}_EASTL_BASE_SOURCE_DIR}/include/Common")

    file(WRITE "${EASTL_ROOT_DIR}/eastl_default_allocator.cpp"
"// AUTOGENERATED WITH CMAKE
#include <cstdint>

void* __cdecl operator new[](size_t size, const char* name, int flags, unsigned debugFlags, const char* file, int line)
{
	return new uint8_t[size];
}

void* __cdecl operator new[](size_t size, size_t alignment, size_t alignmentOffset, const char* pName, int flags, unsigned debugFlags, const char* file, int line)
{
    return new uint8_t[size];
}
"
    )

    add_library(
        ${library_name}_allocator 
        STATIC
        ${EASTL_ROOT_DIR}/eastl_default_allocator.cpp 
    )

    target_link_libraries(${library_name} PUBLIC ${library_name}_allocator)

    add_library(fox.cmake::${library_name} ALIAS ${library_name})

endfunction()