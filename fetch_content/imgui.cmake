include(FetchContent)

function(fetch_make_available_imgui library_name)
    FetchContent_Declare(
        ${library_name}
        GIT_REPOSITORY  https://github.com/ocornut/imgui.git
        GIT_TAG         docking
    )

    FetchContent_MakeAvailable(${library_name})

    # Copy needed files to proper location
    set(IMGUI_INC_DIR "${${library_name}_SOURCE_DIR}/fox_imgui/imgui")

    set(IMGUI_SOURCE_DIR "${${library_name}_SOURCE_DIR}")

    file(MAKE_DIRECTORY ${IMGUI_INC_DIR})

    file(
        COPY 
        "${IMGUI_SOURCE_DIR}/imgui.cpp"
        "${IMGUI_SOURCE_DIR}/imgui.h"
        "${IMGUI_SOURCE_DIR}/imgui_demo.cpp"
        "${IMGUI_SOURCE_DIR}/imgui_draw.cpp"
        "${IMGUI_SOURCE_DIR}/imgui_internal.h"
        "${IMGUI_SOURCE_DIR}/imgui_tables.cpp"
        "${IMGUI_SOURCE_DIR}/imgui_widgets.cpp"
        "${IMGUI_SOURCE_DIR}/imstb_rectpack.h"
        "${IMGUI_SOURCE_DIR}/imstb_textedit.h"
        "${IMGUI_SOURCE_DIR}/imstb_truetype.h"
        
        # Extensions
        "${IMGUI_SOURCE_DIR}/misc/cpp/imgui_stdlib.h"
        "${IMGUI_SOURCE_DIR}/misc/cpp/imgui_stdlib.cpp"

        # Backends - only copy, don't link them!
        "${IMGUI_SOURCE_DIR}/backends/imgui_impl_dx12.h"
        "${IMGUI_SOURCE_DIR}/backends/imgui_impl_dx12.cpp"

        "${IMGUI_SOURCE_DIR}/backends/imgui_impl_win32.h"
        "${IMGUI_SOURCE_DIR}/backends/imgui_impl_win32.cpp"

        DESTINATION
        "${IMGUI_INC_DIR}/"
        )

    # Generate config file
    file(WRITE "${IMGUI_INC_DIR}/imconfig.h" "")
    
    file(APPEND "${IMGUI_INC_DIR}/imconfig.h" 
"// AUTOGENERATED WITH CMAKE
#pragma once
/*
#ifdef IMGUI_IMPL
    #define IMGUI_API __declspec( dllexport )
#else
    #define IMGUI_API __declspec( dllimport )
#endif
        
// Don't export implementations
#ifdef IMGUI_IMPL_API
#undef IMGUI_IMPL_API
#endif
#define IMGUI_IMPL_API
*/

// #include <foxutil/types.hpp>

// #define IM_VEC2_CLASS_EXTRA                                                     \\
//         template<class T>                                                       \\
//         constexpr ImVec2(const ::foxutil::vec2<T>& f) : x(static_cast<float>(f.x)), y(static_cast<float>(f.y)) {}       \\
//         template<class T>                                                       \\
//         operator ::foxutil::vec2<T>() const { return ::foxutil::vec2<T>{ static_cast<T>(x), static_cast<T>(y) }; }
// #define IM_VEC4_CLASS_EXTRA                                                     \\
//         template<class T>                                                       \\
//         constexpr ImVec4(const ::foxutil::vec4<T>& f) : x(static_cast<float>(f.x)), y(static_cast<float>(f.y)), z(static_cast<float>(f.z)), w(static_cast<float>(f.w)) {}   \\
//         template<class T>                                                       \\
//        operator ::foxutil::vec4<T>() const { return ::foxutil::vec4<T>{ static_cast<T>(x), static_cast<T>(y), static_cast<T>(z), static_cast<T>(w)}; }

// struct ImGuiContext;
// IMGUI_API extern ImGuiContext* dll_shared_imgui_context;

// #define GImGui dll_shared_imgui_context

")

    file(WRITE "${IMGUI_INC_DIR}/imgui_gimgui.cpp" "")
    file(APPEND "${IMGUI_INC_DIR}/imgui_gimgui.cpp"
"
#include \"imgui.h\"

// IMGUI_API ImGuiContext* dll_shared_imgui_context = nullptr;
"
)
    add_library(
        ${library_name} 
        STATIC
        "${IMGUI_INC_DIR}/imconfig.h"
        "${IMGUI_INC_DIR}/imgui_gimgui.cpp"
        "${IMGUI_INC_DIR}/imgui.cpp"
        "${IMGUI_INC_DIR}/imgui.h"
        "${IMGUI_INC_DIR}/imgui_demo.cpp"
        "${IMGUI_INC_DIR}/imgui_draw.cpp"
        "${IMGUI_INC_DIR}/imgui_internal.h"
        "${IMGUI_INC_DIR}/imgui_tables.cpp"
        "${IMGUI_INC_DIR}/imgui_widgets.cpp"
        "${IMGUI_INC_DIR}/imstb_rectpack.h"
        "${IMGUI_INC_DIR}/imstb_textedit.h"
        "${IMGUI_INC_DIR}/imstb_truetype.h"
        
        # Extensions
        "${IMGUI_INC_DIR}/imgui_stdlib.h"
        "${IMGUI_INC_DIR}/imgui_stdlib.cpp"
    )

    target_compile_definitions(${library_name} PRIVATE IMGUI_IMPL)
    target_include_directories(${library_name} PUBLIC "${IMGUI_INC_DIR}/../")

    add_library(
        ${library_name}_win32
        STATIC
        "${IMGUI_INC_DIR}/imgui_impl_win32.h"
        "${IMGUI_INC_DIR}/imgui_impl_win32.cpp"
    )

    target_link_libraries("${library_name}_win32" PUBLIC ${library_name})
    target_include_directories("${library_name}_win32" PUBLIC "${IMGUI_INC_DIR}/../")
    target_compile_definitions("${library_name}_win32" PRIVATE IMGUI_IMPL_WIN32_DISABLE_GAMEPAD)

    add_library(
        ${library_name}_d3d12
        STATIC
        "${IMGUI_INC_DIR}/imgui_impl_dx12.h"
        "${IMGUI_INC_DIR}/imgui_impl_dx12.cpp"
    )

    target_link_libraries("${library_name}_d3d12" PUBLIC ${library_name})
    target_include_directories("${library_name}_d3d12" PUBLIC "${IMGUI_INC_DIR}/../")

    add_library(fox.cmake::${library_name} ALIAS ${library_name})
    add_library(fox.cmake::${library_name}_win32 ALIAS ${library_name}_win32)
    add_library(fox.cmake::${library_name}_d3d12 ALIAS ${library_name}_d3d12)
endfunction()